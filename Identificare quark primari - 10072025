/* Il codice seguente è quello che uso per estrarre i due quark primari dal file di dati.

pquark.h ha le intestazioni per trovare i quark primari! 
pquark.cpp invece ha il corpo delle funzioni per trovarle. Riporto solo questo qui. Restituisce un vettore di vettori, il primo indice dà l'evento, il secondo indice invece
dà l'indice a cui trovare il quark primario nei dati. Daje questo lo abbiamo, il codice è:
--------------------------------------------------------------------------------------------------------------------------
*/

#include "utils.h"
#include <cmath>

bool isQuark(int pdg) {
    int apdg = std::abs(pdg);
    return (apdg >= 1 && apdg <= 6);
}

std::string quarkName(int pdg) {
    int apdg = std::abs(pdg);
    switch (apdg) {
        case 1: return "down";
        case 2: return "up";
        case 3: return "strange";
        case 4: return "charm";
        case 5: return "bottom";
        case 6: return "top";
        default: return "unknown";
    }
}

std::vector<std::vector<int>> getPrimaryQuarkIndices(TTree* tree) {
    std::vector<int>* pdgVec = nullptr;
    std::vector<std::vector<int>>* motherIdx = nullptr;

    tree->SetBranchAddress("pdg", &pdgVec);
    tree->SetBranchAddress("custom_motherIdx", &motherIdx);

    Long64_t nEntries = tree->GetEntries();
    std::vector<std::vector<int>> acceptedIndices;

    for (Long64_t i = 0; i < nEntries; ++i) {
        tree->GetEntry(i);
        std::vector<int> eventIndices;

        for (size_t j = 0; j < pdgVec->size(); ++j) {
            int pdg = pdgVec->at(j);
            if (!isQuark(pdg)) continue;
            if (j >= motherIdx->size()) continue;

            const std::vector<int>& motherIds = motherIdx->at(j);
            if (motherIds.size() < 4) continue;

            int m0 = motherIds[0], m1 = motherIds[1];
            int g0 = motherIds[2], g1 = motherIds[3];
            if (m0 < 0 || m1 < 0 || g0 < 0 || g1 < 0) continue;
            if (m0 >= (int)pdgVec->size() || m1 >= (int)pdgVec->size()) continue;
            if (g0 >= (int)pdgVec->size() || g1 >= (int)pdgVec->size()) continue;
            if (pdgVec->at(m0) != 22 || pdgVec->at(m1) != 22) continue;
            if (std::abs(pdgVec->at(g0)) != 2212 || std::abs(pdgVec->at(g1)) != 2212) continue;

            eventIndices.push_back(j);
        }

        acceptedIndices.push_back(eventIndices);
    }

    return acceptedIndices;
}





/*
------------------------------------------------------------------------------------------------------------------------------------------
COME USARLO? RICHIEDE SOLTANTO IL TREE!! SCRIVO UN CODICE IN CUI HAI TUTTO MESSO E HAI ANCHE I QUARK PRIMARI:
------------------------------------------------------------------------------------------------------------------------------------------

#include "pquark.h"
#include <TFile.h>
#include <TTree.h>
#include <iostream>

using namespace std;

int main() {
  TFile *f = TFile::Open("HiForestMiniAOD_patjetsunsubtracted_stableonly2.root");
  if (!f || f->IsZombie()) {
    cerr << "Errore apertura file ROOT" << endl;
    return 1;
  }

  f->cd("HiMergedGenParticleAna");
  TTree *tree = (TTree*)gDirectory->Get("hi");
  if (!tree) {
    cerr << "Albero 'hi' non trovato" << endl;
    return 1;
  }
  vector<int>* pdgVec = nullptr;
  vector<float>* ptVec = nullptr;
  vector<float>* etaVec = nullptr;
  vector<float>* phiVec = nullptr;
  vector<vector<int>>* motherIdx = nullptr;

  tree->SetBranchAddress("pdg", &pdgVec);
  tree->SetBranchAddress("pt", &ptVec);
  tree->SetBranchAddress("eta", &etaVec);
  tree->SetBranchAddress("phi", &phiVec);
  tree->SetBranchAddress("custom_motherIdx", &motherIdx);


  vector<vector<int>> quarkIndices = getPrimaryQuarkIndices(tree);

  return 0;
}*/ 
